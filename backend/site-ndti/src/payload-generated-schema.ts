/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: text('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: text('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: text('sizes_thumbnail_filename'),
    sizes_card_url: text('sizes_card_url'),
    sizes_card_width: numeric('sizes_card_width'),
    sizes_card_height: numeric('sizes_card_height'),
    sizes_card_mimeType: text('sizes_card_mime_type'),
    sizes_card_filesize: numeric('sizes_card_filesize'),
    sizes_card_filename: text('sizes_card_filename'),
    sizes_tablet_url: text('sizes_tablet_url'),
    sizes_tablet_width: numeric('sizes_tablet_width'),
    sizes_tablet_height: numeric('sizes_tablet_height'),
    sizes_tablet_mimeType: text('sizes_tablet_mime_type'),
    sizes_tablet_filesize: numeric('sizes_tablet_filesize'),
    sizes_tablet_filename: text('sizes_tablet_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_card_sizes_card_filename_idx: index('media_sizes_card_sizes_card_filename_idx').on(
      columns.sizes_card_filename,
    ),
    media_sizes_tablet_sizes_tablet_filename_idx: index(
      'media_sizes_tablet_sizes_tablet_filename_idx',
    ).on(columns.sizes_tablet_filename),
  }),
)

export const news_content = sqliteTable(
  'news_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    paragraph: text('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('news_content_order_idx').on(columns._order),
    _parentIDIdx: index('news_content_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [news.id],
      name: 'news_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const news = sqliteTable(
  'news',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    description: text('description').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    type: text('type', { enum: ['edital', 'evento', 'projeto'] }).notNull(),
    date: text('date')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    news_image_idx: index('news_image_idx').on(columns.image),
    news_updated_at_idx: index('news_updated_at_idx').on(columns.updatedAt),
    news_created_at_idx: index('news_created_at_idx').on(columns.createdAt),
  }),
)

export const projects_technologies = sqliteTable(
  'projects_technologies',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    technology: text('technology'),
  },
  (columns) => ({
    _orderIdx: index('projects_technologies_order_idx').on(columns._order),
    _parentIDIdx: index('projects_technologies_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_technologies_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_long_description = sqliteTable(
  'projects_long_description',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    paragraph: text('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('projects_long_description_order_idx').on(columns._order),
    _parentIDIdx: index('projects_long_description_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_long_description_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_features = sqliteTable(
  'projects_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    feature: text('feature'),
  },
  (columns) => ({
    _orderIdx: index('projects_features_order_idx').on(columns._order),
    _parentIDIdx: index('projects_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_team = sqliteTable(
  'projects_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    member: text('member'),
  },
  (columns) => ({
    _orderIdx: index('projects_team_order_idx').on(columns._order),
    _parentIDIdx: index('projects_team_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects = sqliteTable(
  'projects',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    category: text('category', {
      enum: ['Desenvolvimento Web', 'Aplicativo MÃ³vel', 'Plataforma Web', 'IoT & Software'],
    }).notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    description: text('description').notNull(),
    startDate: text('start_date').notNull(),
    status: text('status').notNull(),
    repository: text('repository'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    projects_image_idx: index('projects_image_idx').on(columns.image),
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const team_skills = sqliteTable(
  'team_skills',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    skill: text('skill'),
  },
  (columns) => ({
    _orderIdx: index('team_skills_order_idx').on(columns._order),
    _parentIDIdx: index('team_skills_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team.id],
      name: 'team_skills_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team = sqliteTable(
  'team',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    role: text('role').notNull(),
    description: text('description'),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    email: text('email'),
    linkedin: text('linkedin'),
    github: text('github'),
    lattes: text('lattes'),
    isActive: integer('is_active', { mode: 'boolean' }).default(true),
    order: numeric('order').default('0'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    team_image_idx: index('team_image_idx').on(columns.image),
    team_updated_at_idx: index('team_updated_at_idx').on(columns.updatedAt),
    team_created_at_idx: index('team_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    newsID: integer('news_id'),
    projectsID: integer('projects_id'),
    teamID: integer('team_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_news_id_idx: index(
      'payload_locked_documents_rels_news_id_idx',
    ).on(columns.newsID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_team_id_idx: index(
      'payload_locked_documents_rels_team_id_idx',
    ).on(columns.teamID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    newsIdFk: foreignKey({
      columns: [columns['newsID']],
      foreignColumns: [news.id],
      name: 'payload_locked_documents_rels_news_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    teamIdFk: foreignKey({
      columns: [columns['teamID']],
      foreignColumns: [team.id],
      name: 'payload_locked_documents_rels_team_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_news_content = relations(news_content, ({ one }) => ({
  _parentID: one(news, {
    fields: [news_content._parentID],
    references: [news.id],
    relationName: 'content',
  }),
}))
export const relations_news = relations(news, ({ one, many }) => ({
  content: many(news_content, {
    relationName: 'content',
  }),
  image: one(media, {
    fields: [news.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_projects_technologies = relations(projects_technologies, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_technologies._parentID],
    references: [projects.id],
    relationName: 'technologies',
  }),
}))
export const relations_projects_long_description = relations(
  projects_long_description,
  ({ one }) => ({
    _parentID: one(projects, {
      fields: [projects_long_description._parentID],
      references: [projects.id],
      relationName: 'longDescription',
    }),
  }),
)
export const relations_projects_features = relations(projects_features, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_features._parentID],
    references: [projects.id],
    relationName: 'features',
  }),
}))
export const relations_projects_team = relations(projects_team, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_team._parentID],
    references: [projects.id],
    relationName: 'team',
  }),
}))
export const relations_projects = relations(projects, ({ one, many }) => ({
  image: one(media, {
    fields: [projects.image],
    references: [media.id],
    relationName: 'image',
  }),
  technologies: many(projects_technologies, {
    relationName: 'technologies',
  }),
  longDescription: many(projects_long_description, {
    relationName: 'longDescription',
  }),
  features: many(projects_features, {
    relationName: 'features',
  }),
  team: many(projects_team, {
    relationName: 'team',
  }),
}))
export const relations_team_skills = relations(team_skills, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_skills._parentID],
    references: [team.id],
    relationName: 'skills',
  }),
}))
export const relations_team = relations(team, ({ one, many }) => ({
  image: one(media, {
    fields: [team.image],
    references: [media.id],
    relationName: 'image',
  }),
  skills: many(team_skills, {
    relationName: 'skills',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    newsID: one(news, {
      fields: [payload_locked_documents_rels.newsID],
      references: [news.id],
      relationName: 'news',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    teamID: one(team, {
      fields: [payload_locked_documents_rels.teamID],
      references: [team.id],
      relationName: 'team',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users: typeof users
  media: typeof media
  news_content: typeof news_content
  news: typeof news
  projects_technologies: typeof projects_technologies
  projects_long_description: typeof projects_long_description
  projects_features: typeof projects_features
  projects_team: typeof projects_team
  projects: typeof projects
  team_skills: typeof team_skills
  team: typeof team
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_news_content: typeof relations_news_content
  relations_news: typeof relations_news
  relations_projects_technologies: typeof relations_projects_technologies
  relations_projects_long_description: typeof relations_projects_long_description
  relations_projects_features: typeof relations_projects_features
  relations_projects_team: typeof relations_projects_team
  relations_projects: typeof relations_projects
  relations_team_skills: typeof relations_team_skills
  relations_team: typeof relations_team
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
